package com.patrick;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.concurrent.TimeUnit;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

	private static final String URL = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;MVCC=FALSE;LOCK_MODE=0";
	// private static final String URL = "jdbc:h2:file:~/test";

	private static final String USER = "";
	private static final String PASSWORD = "";

	private static final String DROP_TABLE = " DROP TABLE IF EXISTS TEST ";
	private static final String CREATE_TABLE = " CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255)) ";
	private static final String INSERT = " INSERT INTO TEST VALUES(?,?) ";
	private static final String QUERY = " select * from test ";
	private static final String ID = "ID";
	private static final String NAME = "NAME";

	public static void main(String[] args) {
		try {
			execute();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	private static void execute() throws SQLException {
		createTable();
		insertWithTx();

		Thread thread = new Thread() {
			@Override
			public void run() {
				try {
					App.insertWithoutTx();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		};
		thread.start();

		sleep(3);
		query();

		System.out.println("==============");

		try {
			thread.join();
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
		}

		query();
	}

	private static Connection getConnection() throws SQLException {
		Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);
		connection.setAutoCommit(false);
		// connection.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
		// connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
		return connection;
	}

	private static void createTable() throws SQLException {
		try (Connection connection = getConnection();
				PreparedStatement dropTable = connection.prepareStatement(DROP_TABLE);
				PreparedStatement createTable = connection.prepareStatement(CREATE_TABLE)) {
			dropTable.execute();
			createTable.execute();
		}
	}

	private static void insertWithoutTx() throws SQLException {
		try (Connection connection = getConnection(); PreparedStatement pstmt = connection.prepareStatement(INSERT)) {
			pstmt.setInt(1, 2);
			pstmt.setString(2, "Hi, I'm Patrick.");
			pstmt.execute();
			sleep(10);
		}
	}

	private static void insertWithTx() throws SQLException {
		try (Connection connection = getConnection(); PreparedStatement pstmt = connection.prepareStatement(INSERT)) {
			insertWithTx(connection, pstmt);
		}
	}

	private static void insertWithTx(Connection connection, PreparedStatement pstmt) throws SQLException {
		try {
			pstmt.setInt(1, 1);
			pstmt.setString(2, "Hello, world!");
			pstmt.execute();

			connection.commit();
		} finally {
			connection.rollback();
		}
	}

	private static void query() throws SQLException {
		try (Connection connection = getConnection();
				PreparedStatement pstmt = connection.prepareStatement(QUERY);
				ResultSet resultSet = pstmt.executeQuery()) {
			System.out.println("ID | NAME");
			while (resultSet.next()) {
				System.out.println(String.format("%s | %s", resultSet.getInt(ID), resultSet.getString(NAME)));
			}
		}
	}

	private static void sleep(long seconds) {
		try {
			TimeUnit.SECONDS.sleep(seconds);
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
		}
	}
}
